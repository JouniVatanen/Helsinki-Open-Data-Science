table0(df, x, y)
table0 <- function(data = NULL, ...) {
eval(table(...),
envir = data, enclos = parent.frame())
}
df <- data.frame(x = rbinom(10,1,0.5), y = rbinom(10,1,0.5))
table0(df, x, y)
table0 <- function(data = NULL, ...) {
eval(substitute(table(...)),
envir = data, enclos = parent.frame())
}
df <- data.frame(x = rbinom(10,1,0.5), y = rbinom(10,1,0.5))
table0(df, x, y)
loss_func <- function(class, probability) abs(class - probability) %>% > 0.5 %>% mean
loss_func <- function(class, probability) abs(class - probability) %>% `>` 0.5 %>% mean
loss_func <- function(class, probability) abs(class - probability) %>% `> 0.5` %>% mean
loss_func <- function(class, probability) abs(class - probability) > 0.5 %>% mean
mean(TRUE, FALSE)
mean(c(TRUE, FALSE))
mean(c(TRUE, TRUE FALSE))
mean(c(TRUE, TRUE, FALSE))
cv$delta
loss_func <- function(class, prob) {
n_wrong <- abs(class - probability) > 0.5
mean(n_wrong)
}
loss_func(alc$high_use, alc$probability)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_3140/datasets/alc.txt", sep  =",", header = T)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_3140/datasets/alc.txt", sep  =",", header = T)
library(dplyr)
library(dplyr)
m <- glm(high_use ~ sex + failures + absences, data = alc, family = "binomial")
alc <- mutate(alc, probability = predict(m, type = "response"))
alc <- mutate(alc, probability = predict(m, type = "response"))
alc <- mutate(alc, prediction = probability > 0.5)
loss_func <- function(class, prob) {
n_wrong <- abs(class - probability) > 0.5
mean(n_wrong)
}
loss_func(alc$high_use, alc$probability)
alc <- mutate(alc, probability = predict(m, type = "response"))
alc <- mutate(alc, prediction = probability > 0.5)
loss_func(alc$high_use, alc$probability)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(alc$high_use, alc$probability)
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
cv$delta
?cv.glm
cv$delta[1]
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc$high_use, prob = 0)
loss_func(class = alc$high_use, prob = 1)
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 1)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 2)
cv$delta[1]
loss_func(class = alc$high_use, prob = alc$probability)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = nrow(alc))
cv$delta[1]
?options
gather(alc) %>% glimpse
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_3140/datasets/alc.txt", sep  =",", header = T)
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% glimpse
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free")
?geom_bar
library(testwhat)
?test_function
m <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
summary(m)
coefs(m)
library(dplyr)
coefs(m)
coef(m)
confint(m)
?coef
?predict
colnames(math_por)
m <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_3140/datasets/alc.txt", sep  =",", header = T)
library(GGally)
ggpairs(alc)
2/3 / 1/3
(2/3) / (1/3)
library(ggplot2)
?ylim
qplots(p, odds, ylim = c(0, 8), geom = "line"))
p <- seq(0,0.96, by=0.01)
odds <- p / (1-p)
library(ggplot2)
qplot(p, odds, ylim = c(0, 8), geom = "line"))
qplot(p, odds, ylim = c(0, 8), geom = "line")
p <- seq(0,0.96, by=0.001)
odds <- p / (1-p)
library(ggplot2)
qplot(p, odds, ylim = c(0, 8), geom = "line")
qplot(p, odds, ylim = c(0, 8), geom = "line", col = "blue")
qplot(p, odds, ylim = c(0, 8), geom = "line")
q + ggtitle("Odds and probability")
q <- qplot(p, odds, ylim = c(0, 8), geom = "line")
q + ggtitle("Odds and probability")
options(warn = -1)
p <- seq(0,0.96, by=0.001)
odds <- p / (1-p)
library(ggplot2)
q <- qplot(p, odds, ylim = c(0, 8), geom = "line")
q + ggtitle("Odds and probability")
q <- q + ggtitle("Odds and probability")
q + geom_vline(2/3)
?geom_vline
q + geom_vline(xintercept = 2/3)
q + geom_vline(xintercept = 2/3, col = "blue", alpha = 0.2)
q <- q + geom_hline(yintercept = 2, col = "blue", alpha = 0.2)
q
q <- qplot(p, odds, ylim = c(0, 8), geom = "line")
q <- q + ggtitle("Odds and probability")
q <- q + geom_vline(xintercept = 2/3, col = "blue", alpha = 0.3)
q <- q + geom_hline(yintercept = 2, col = "blue", alpha = 0.3)
q
library(GGally)
?ggpairs
for(i in 1:5){
print()
print(i*2)
print(i*3)
}
for(i in 1:5){
print(i)
print(i*2)
print(i*3)
}
1/6
10/25
pr <- prcomp(iris[-5])
newbiplot <- function(pca, choices = 1:2, show_arrows = F, col = 1) {
# algorithm taken from stats:::biplot.prcomp (and biplot.default)
scores <- pca$x
lam <- pca$sdev[choices]
n <- NROW(scores)
lam <- lam *sqrt(n)
x <- t(t(scores[,choices])/lam)
y <- t(t(pca$rotation[, choices])*lam)
eigenv <- pca$sdev**2
var_explained <- paste0("(",round(100*(eigenv/sum(eigenv)), 1),"%)")
colnames(x) <- paste(colnames(x), var_explained[choices])
unsigned.range <- function(x) c(-abs(min(x, na.rm = TRUE)),
abs(max(x, na.rm = TRUE)))
rangx1 <- unsigned.range(x[, 1])
rangx2 <- unsigned.range(x[, 2])
xlim <- ylim <- range(rangx1, rangx2)
plot(x, type = "n", xlim = xlim, ylim = ylim)
points(x, col = col)
if(show_arrows) {
rangy1 <- unsigned.range(y[, 1])
rangy2 <- unsigned.range(y[, 2])
ratio <- max(rangy1/rangx1, rangy2/rangx2)
par(new = T)
plot(y, axes = F, type = "n", xlim = xlim*ratio, ylim = ylim*ratio,
xlab = "", ylab = "")
axis(3)
axis(4)
ylabs <- dimnames(y)[[1]]
text(y, labels = ylabs, cex = 0.8, col = "blue")
arrows(0, 0, y[, 1L] * 0.8, y[, 2L] * 0.8, col = "red", length = 0.1)
}
}
newbiplot(pr)
newbiplot(pr, T)
newbiplot(pr, 1:2, T)
pr$sdev
summary(pr)
newbiplot <- function(pca, choices = 1:2, show_arrows = F, col = 1) {
# algorithm taken from stats:::biplot.prcomp (and biplot.default)
scores <- pca$x
lam <- pca$sdev[choices]
n <- NROW(scores)
lam <- lam *sqrt(n)
x <- t(t(scores[,choices])/lam)
y <- t(t(pca$rotation[, choices])*lam)
eigenv <- pca$sdev**2
var_explained <- paste0("(",round(100*(eigenv/sum(eigenv)), 1),"%)")
colnames(x) <- paste(colnames(x), var_explained[choices])
unsigned.range <- function(x) c(-abs(min(x, na.rm = TRUE)),
abs(max(x, na.rm = TRUE)))
rangx1 <- unsigned.range(x[, 1])
rangx2 <- unsigned.range(x[, 2])
xlim <- ylim <- range(rangx1, rangx2)
plot(x, type = "n", xlim = xlim, ylim = ylim)
points(x, col = col)
if(show_arrows) {
rangy1 <- unsigned.range(y[, 1])
rangy2 <- unsigned.range(y[, 2])
ratio <- max(rangy1/rangx1, rangy2/rangx2)
par(new = T)
plot(y, axes = F, type = "n", xlim = xlim*ratio, ylim = ylim*ratio,
xlab = "", ylab = "")
ylabs <- dimnames(y)[[1]]
text(y, labels = ylabs, cex = 0.8, col = "blue")
arrows(0, 0, y[, 1L] * 0.8, y[, 2L] * 0.8, col = "red", length = 0.1)
}
}
newbiplot(pr, 1:2, T)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep  =",", header = T)
library(dplyr)
alc <- mutate(alc, alc_use = round((Dalc + Wald)/2))
alc <- mutate(alc, alc_use = round((Dalc + Walc)/2))
keep <- sapply(alc, is.numeric
)
numeric_alc <- select(alc, which(keep))
num_alc <- select(alc, which(keep))
str(num_alc)
num_alc <- select(num_alc, -Walc, -Dalc)
str(num_alc)
library(MASS)
num_alc$alc_use <- as.factor(num_alc$alc_use)
str(num_alc)
summary(num_alc)
ld <- lda(alc_use ~ ., data = num_alc)
ld
plot(as.matrix(num_alc)%*%ld$scaling[,1:2], col = num_alc$alc_use)
str(ld$scaling[,1:2])
M <- as.matrix(num_alc)
M <- as.matrix(num_alc)
P <- ld$scaling[,1:2]
plot(M%*%P, col = num_alc$alc_use)
str(M)
M <- as.matrix(select(num_alc, -alc_use))
P <- ld$scaling[,1:2]
M <- as.matrix(dplyr:select(num_alc, -alc_use))
M <- as.matrix(dplyr::select(num_alc, -alc_use))
P <- ld$scaling[,1:2]
plot(M%*%P, col = num_alc$alc_use)
plot(M%*%P, col = num_alc$alc_use, pch = 20)
?ntile
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep  =",", header = T)
library(dplyr)
alc <- mutate(alc, alc_use = round((Dalc + Walc)/2))
keep <- sapply(alc, is.numeric)
num_alc <- select(alc, which(keep))
num_alc <- select(num_alc, -Walc, -Dalc)
num_alc$alc_use[num_alc$alc_use > 2, ] <- 3
num_alc$alc_use <- as.factor(num_alc$alc_use)
alc <- mutate(alc, alc_use = round((Dalc + Walc)/2))
keep <- sapply(alc, is.numeric)
num_alc <- select(alc, which(keep))
library(dplyr)
alc <- mutate(alc, alc_use = round((Dalc + Walc)/2))
keep <- sapply(alc, is.numeric)
num_alc <- select(alc, which(keep))
num_alc <- dplyr::select(alc, which(keep))
num_alc <- dplyr::select(num_alc, -Walc, -Dalc)
num_alc$alc_use[num_alc$alc_use > 2, ] <- 3
num_alc$[num_alc$alc_use > 2, ] <- 3
num_alc[num_alc$alc_use > 2, ] <- 3
num_alc$alc_use <- as.factor(num_alc$alc_use)
str(num_alc)
library(MASS)
ld <- lda(alc_use ~ ., data = num_alc)
ld
M <- as.matrix(dplyr::select(num_alc, -alc_use))
P <- ld$scaling[,1:2]
plot(M%*%P, col = num_alc$alc_use, pch = 20)
str(num_alc)
summary(num_alc)
ld <- lda(alc_use ~ ., data = num_alc)
ld
M <- as.matrix(dplyr::select(num_alc, -alc_use))
P <- ld$scaling[,1:2]
plot(M%*%P, col = num_alc$alc_use, pch = 20)
(1/2)*(1/15)/(1/4)
1/30/4
1/30*4
4/30
2/15
xplusx <- function(s) (s-1)/36
curve(xplusx, from = 1, to = 12)
library(MASS)
data("Boston")
source("https://raw.githubusercontent.com/taiyun/corrplot/master/R/corrplot.R")
c - cor(Boston)
c <- cor(Boston)
corrplot(c)
library(boot)
?cv.glm
hd <- read.csv("human_development.csv", stringsAsFactors = F)
setwd("C:/Users/Tuomo/Dropbox/GitHub/Helsinki-Open-Data-Science/datasets")
hd <- read.csv("human_development.csv", stringsAsFactors = F)
hd$GNI <- gsub(",","",hd$GNI) %>% as.numeric
library(dplyr)
hd$GNI <- gsub(",","",hd$GNI) %>% as.numeric
summary(hd)
hd <- read.csv("human_development.csv")
summary(hd)
head(hd)
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Years.Education.Expected", "Years.Education.Mean", "GNI", "GNI.Minus.Rank")
hd$GNI <- gsub(",","",hd$GNI) %>% as.numeric
gii <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
hd <- read.csv("human_development.csv", stringsAsFactors = F)
gii <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Years.Education.Expected", "Years.Education.Mean", "GNI", "GNI.Minus.Rank")
names(gii) <- c("GII.Rank", "Country", "GII", "Maternal.Mortality.Ratio",
"Adolescent.Birth.Ratio", "Percent.Parliament", "Edu2.Female", "Edu2.Male",
"Labour.Female", "Labour.Male")
hd$GNI <- gsub(",","",hd$GNI) %>% as.numeric
gii <- mutate(gii, Odds.Edu2 = Edu2.Female / Edu2.Male, Odds.Labour = Labour.Female / Labour.Male)
human <- inner_join(hd, gii, by = "country")
human <- inner_join(hd, gii, by = "Country")
names(human)
human <- inner_join(hd, gii, by = "Country")
rownames(human) <- human$Country
human <- inner_join(hd, gii, by = "Country")
rownames(human) <- human$Country
human <- select(human, -Country, -HDI.Rank, -HDI, -GNI.Minus.Rank, -GII.Rank, -GII)
human <- filter(human, complete.cases(human2))
human <- filter(human, complete.cases(human))
tail(human)
human <- inner_join(hd, gii, by = "Country")
rownames(human) <- human$Country
tail(human)
human <- select(human, -Country, -HDI.Rank, -HDI, -GNI.Minus.Rank, -GII.Rank, -GII)
tail(human)
human <- filter(human, complete.cases(human))
tail(human)
human <- inner_join(hd, gii, by = "Country")
human <- select(human, -HDI.Rank, -HDI, -GNI.Minus.Rank, -GII.Rank, -GII)
gii <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
hd <- read.csv("human_development.csv", stringsAsFactors = F)
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Years.Education.Expected", "Years.Education.Mean", "GNI", "GNI.Minus.Rank")
names(gii) <- c("GII.Rank", "Country", "GII", "Maternal.Mortality.Ratio",
"Adolescent.Birth.Ratio", "Percent.Parliament", "Edu2.Female", "Edu2.Male",
"Labour.Female", "Labour.Male")
hd$GNI <- gsub(",","",hd$GNI) %>% as.numeric
human <- inner_join(hd, gii, by = "Country")
human <- select(human, -HDI.Rank, -HDI, -GNI.Minus.Rank, -GII.Rank, -GII)
nrow(human)
human <- filter(human, complete.cases(human))
nrow(human)
tail(human)
human <- slice(human, -nrow(human))
rownames(human) <- human$Country
human <- select(human, -Country)
summary(human)
human_ <- scale(human)
pc <- prcomp(human_)
library(ggfortify)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6)
str(human)
hd <- read.csv("human_development.csv", stringsAsFactors = F)
gii <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Education.Expected", "Education.Mean", "GNI", "GNI.Minus.Rank")
names(gii) <- c("GII.Rank", "Country", "GII", "Maternal.Mortality",
"Adolescent.Birth", "Percent.Parliament", "Edu2.Female", "Edu2.Male",
"Labour.Female", "Labour.Male")
hd$GNI <- gsub(",","",hd$GNI) %>% as.numeric
gii <- mutate(gii, Odds.Edu2 = Edu2.Female / Edu2.Male, Odds.Labour = Labour.Female / Labour.Male)
human <- inner_join(hd, gii, by = "Country")
keep <- c("Country", "Odds.Edu2", "Odds.Labour", "Education.Expected","Education.Mean", "GNI", "Maternal.Mortality", "Percent.Parliament")
human <- select(human, one_of(keep))
nrow(human)
human <- filter(human, complete.cases(human))
nrow(human)
tail(human)
human <- slice(human, -nrow(human))
rownames(human) <- human$Country
human <- select(human, -Country)
human_ <- scale(human)
pc <- prcomp(human_)
library(ggfortify)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6)
gii <- mutate(gii, Odds.Edu2 = Edu2.Male / Edu2.Female, Odds.Labour = Labour.Male / Labour.Female)
human <- inner_join(hd, gii, by = "Country")
keep <- c("Country", "Odds.Edu2", "Odds.Labour", "Education.Expected","Education.Mean", "GNI", "Maternal.Mortality", "Percent.Parliament")
human <- select(human, one_of(keep))
human <- filter(human, complete.cases(human))
human <- slice(human, -nrow(human))
rownames(human) <- human$Country
human <- select(human, -Country)
human_ <- scale(human)
pc <- prcomp(human_)
library(ggfortify)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6)
# The Human Development Index (HDI) is a summary measure of achievements
# in key dimensions of human development
# data from kaggle: https://www.kaggle.com/undp/human-development
# Tuomo Nieminen 2017
# meta
# browseURL("https://www.kaggle.com/undp/human-development")
# libraries
library(dplyr)
# read human develop data
hd <- read.csv("human_development.csv", stringsAsFactors = F)
# read gender inequality data
gii <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# rename human development variables
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Education.Expected", "Education.Mean", "GNI", "GNI.Minus.Rank")
# rename gender inequality variables
names(gii) <- c("GII.Rank", "Country", "GII", "Maternal.Mortality",
"Adolescent.Birth", "Percent.Parliament", "Edu2.Female", "Edu2.Male",
"Labour.Female", "Labour.Male")
# deal with comma  separator for 1000
hd$GNI <- gsub(",","",hd$GNI) %>% as.numeric
# do a bit of feature engineering
gii <- mutate(gii, Odds.Edu2 = Edu2.Female / Edu2.Male, Odds.Labour = Labour.Female / Labour.Male)
# join data
human <- inner_join(hd, gii, by = "Country")
# exclude unneeded variables
keep <- c("Country", "Odds.Edu2", "Odds.Labour", "Education.Mean", "GNI", "Maternal.Mortality", "Percent.Parliament")
human <- select(human, one_of(keep))
# remove rows with NA values
human <- filter(human, complete.cases(human))
# remove 'World' observation
human <- slice(human, -nrow(human))
# add rownames as countries and remove country variable
rownames(human) <- human$Country
human <- select(human, -Country)
library(GGally)
# ggpairs(human)
# pca
#---
# center
human_ <- scale(human)
# pca
pc <- prcomp(human_)
# plot
library(ggfortify)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6)
# The Human Development Index (HDI) is a summary measure of achievements
# in key dimensions of human development
# data from kaggle: https://www.kaggle.com/undp/human-development
# Tuomo Nieminen 2017
# meta
# browseURL("https://www.kaggle.com/undp/human-development")
# libraries
library(dplyr)
# read human develop data
hd <- read.csv("human_development.csv", stringsAsFactors = F)
# read gender inequality data
gii <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# rename human development variables
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Education.Expected", "Education.Mean", "GNI", "GNI.Minus.Rank")
# rename gender inequality variables
names(gii) <- c("GII.Rank", "Country", "GII", "Maternal.Mortality",
"Adolescent.Birth", "Percent.Parliament", "Edu2.Female", "Edu2.Male",
"Labour.Female", "Labour.Male")
# deal with comma  separator for 1000
hd$GNI <- gsub(",","",hd$GNI) %>% as.numeric
# do a bit of feature engineering
gii <- mutate(gii, Odds.Edu2 = Edu2.Female / Edu2.Male, Odds.Labour = Labour.Female / Labour.Male)
# join data
human <- inner_join(hd, gii, by = "Country")
# exclude unneeded variables
keep <- c("Country", "Odds.Edu2", "Odds.Labour", "Education.Expected", "GNI", "Maternal.Mortality", "Percent.Parliament")
human <- select(human, one_of(keep))
# remove rows with NA values
human <- filter(human, complete.cases(human))
# remove 'World' observation
human <- slice(human, -nrow(human))
# add rownames as countries and remove country variable
rownames(human) <- human$Country
human <- select(human, -Country)
library(GGally)
# ggpairs(human)
# pca
#---
# center
human_ <- scale(human)
# pca
pc <- prcomp(human_)
# plot
library(ggfortify)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6)
knitr::opts_chunk$set(echo = TRUE)
browseURL("https://www.kaggle.com/undp/human-development")
?autoplot.prcomp
?autoplot.biplot
?ggbiplot
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6, alpha = 0.6)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6, alpha = 0.1)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6, aes(alpha = 0.5))
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6, frame = T)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6, label.alpha = 0.5, loadngs.label.alpha = 0.5)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6, label.alpha = 0.5, loadings.label.alpha = 0.5)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.5, loadings.label.alpha = 0.2)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.3)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, label.hjust = 1)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, label.hjust = -1)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, loadings.hjust = -1)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, loadings.hjust = -2)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, loadings.label.hjust = -2)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, loadings.label.hjust = -1)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, loadings.label.hjust = -.1)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, loadings.label.hjust = -0.1)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, loadings.label.hjust = -0.5)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, loadings.label.hjust = 1)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5, loadings.label.hjust = -0.2)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.7, loadings.label.alpha = 0.5)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.6, loadings.label.alpha = 0.6, loadings.label.vjust = 1)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.6, loadings.label.alpha = 0.6, loadings.label.vjust = 2)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.6, loadings.label.alpha = 0.6, loadings.label.vjust = -1)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.6, loadings.label.alpha = 0.6, loadings.label.vjust = -0.5)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.6, loadings.label.alpha = 0.6, xlim = c(-0.3, 0.3))
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.5, loadings.label.alpha = 0.6, xlim = c(-0.2, 0.2))
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.4, loadings.label.alpha = 0.6, xlim = c(-0.2, 0.25))
