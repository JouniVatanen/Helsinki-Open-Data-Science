1/30*4
4/30
2/15
xplusx <- function(s) (s-1)/36
curve(xplusx, from = 1, to = 12)
library(MASS)
data("Boston")
source("https://raw.githubusercontent.com/taiyun/corrplot/master/R/corrplot.R")
c - cor(Boston)
c <- cor(Boston)
corrplot(c)
knitr::opts_chunk$set(echo = TRUE)
# access dplyr
library(dplyr)
# read human develop data
hd <- read.csv("human_development.csv", stringsAsFactors = F)
# read gender inequality data
gii <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# look at the data
glimpse(hd)
glimpse(gii)
# rename human development variables
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Education.Expected", "Education.Mean", "GNI", "GNI.Minus.Rank")
# rename gender inequality variables
names(gii) <- c("GII.Rank", "Country", "GII", "Maternal.Mortality",
"Adolescent.Birth", "Percent.Parliament", "Edu2.Female", "Edu2.Male",
"Labour.Female", "Labour.Male")
# deal with comma  separator for 1000
hd$GNI <- gsub(",","",hd$GNI) %>% as.numeric
# do a bit of feature engineering
gii <- mutate(gii, Odds.Edu2 = Edu2.Female / Edu2.Male, Odds.Labour = Labour.Female / Labour.Male)
# join data
human <- inner_join(hd, gii, by = "Country")
# exclude unneeded variables
keep <- c("Country", "Odds.Edu2", "Odds.Labour", "Education.Expected", "GNI", "Maternal.Mortality", "Percent.Parliament")
human <- select(human, one_of(keep))
# remove rows with NA values
human <- filter(human, complete.cases(human))
# remove 'World' observation
human <- slice(human, -nrow(human))
# add rownames as countries and remove country variable
rownames(human) <- human$Country
human <- select(human, -Country)
human_ <- scale(human)
pc <- prcomp(human_)
library(ggfortify)
pc
?autoplot.princomp
?ggbiplot
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.4, loadings.label.alpha = 0.7, xlim = c(-0.2, 0.25))
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 5, label.alpha = 0.4, loadings.label.alpha = 0.7, xlim = c(-0.2, 0.25))
install.packages("FactoMineR")
library(FactoMineR)
str(children)
data("childred")
data("children")
children
library(FactoMineR)
data(tea)
res.mca <- MCA(tea,quanti.sup=19,quali.sup=20:36)
summary(res.mca)
plot(res.mca,invisible=c("var","quali.sup","quanti.sup"),cex=0.7)
plot(res.mca,invisible=c("ind","quali.sup","quanti.sup"),cex=0.8)
plot(res.mca,invisible=c("quali.sup","quanti.sup"),cex=0.8)
dimdesc(res.mca)
plotellipses(res.mca,keepvar=1:4)
plotellipses(res.mca,keepvar="Tea")
data(tea)
View(tea)
tea[,19]
plot(res.mca,invisible=c("var","quali.sup","quanti.sup"),cex=0.7)
summary(res.mca)
plot(res.mca,invisible=c("var","quali.sup","quanti.sup"),cex=0.7)
plot(res.mca,invisible=c("ind","quali.sup","quanti.sup"),cex=0.8)
data(package = "FactoMineR")
data(hobbies)
res.mca <- MCA(hobbies,quali.sup=19:22,quanti.sup=23)
res.mca <- MCA(hobbies,quali.sup=19:22,quanti.sup=23)
plot(res.mca,invisible=c("var","quali.sup"),cex=.5,label="none")
View(hobbies)
plot(res.mca,invisible=c("ind","quali.sup"),hab="quali")
plot(res.mca,invisible=c("ind","var"),hab="quali")
names(hobbies)[19:22]
plot(res.mca,invisible=c("ind"),hab="quali")
plot(res.mca,invisible=c("ind","var"),hab="quali")
dimdesc(res.mca)
?dimdesc
plotellipses(res.mca,keepvar=1:4)
data("poison")
View(poison)
plot(res.mca,invisible=c("ind"),hab="quali")
plot(res.mca,invisible=c("ind", "quali.sup"),hab="quali")
data(wines)
data(wine)
View(wine)
View(tea)
names(tea)[19]
tea_ <- tea[-19]
res.mca <- MCA(tea_,quali.sup=20:36)
res.mca <- MCA(tea_,quali.sup=19:35)
?MCA
res.mca <- MCA(tea_,quali.sup=19:35, graph = F)
plot(res.mca,invisible=c("var","quali.sup"),cex=0.7)
plot(res.mca,invisible=c("ind","quali.sup"),cex=0.8)
plot(res.mca,invisible=c("ind"),cex=0.8)
plot(res.mca,invisible=c("quali.sup","quanti.sup"),cex=0.8, xlim = c(-2,2))
plot(res.mca,invisible=c("ind"),cex=0.8, xlim = c(-2,2))
?plot.MCA
plot(res.mca,invisible=c("ind"),cex=0.8, habillage = "quali")
plot(res.mca,invisible=c("ind", "quali.sup"),cex=0.8, habillage = "quali")
data(children)
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8)
summary(res.ca)
ellipseCA(res.ca)
ellipseCA(res.ca,ellipse="col",col.col.ell=c(rep("blue",2),rep("transparent",3)),
invisible=c("row.sup","col.sup"))
View(children)
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8)
library(MASS)
data("Boston")
boston <- scale(boston)
boston <- scale(Boston)
d <- dist(boston)
d <- dist(boston)
km <-kmeans(di, centers = 3)
boston <- scale(Boston)
d <- dist(boston)
km <-kmeans(d, centers = 3)
lda.fit <- lda(km$cluster~., data = boston)
km <-kmeans(d, centers = 3)
lda.fit <- lda(km$cluster~., data = boston)
lda.fit <- lda(km$cluster~., data = as.matrix(boston))
str(boston)
lda.fit <- lda(km$cluster~., data = data.frame(boston))
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit)
lda.arrows(lda.fit)
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit)
lda.arrows(lda.fit, myscale = 3)
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 4)
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(Boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 4)
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 2)
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 1)
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 1)
# helper func
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# access MASS
library(MASS)
# access data
data("Boston")
# scale
boston <- scale(Boston)
# distance matrx
d <- dist(boston)
# k-means clustering
km <-kmeans(d, centers = 3)
# lda
lda.fit <- lda(km$cluster~., data = data.frame(boston))
plot(lda.fit, col = km$cluster)
lda.arrows(lda.fit, myscale = 4)
substr(abc, 3, 5)
abc <- "abcdefg"
substr(abc, 3, 5)
gsub("cde", "123", abc)
today <- Sys.Date()
today
?substr
today <- Sys.Date()
today
substr(today, 1, 4)
gsub("-*-", "feb", today)
gsub("-*+-", "feb", today)
gsub("-*.-", "feb", today)
gsub("-*-.", "feb", today)
gsub(".*-*|-", "feb", today)
gsub(".*-*|-.*", "feb", today)
gsub(".*-\\s*|-.*", "feb", today)
gsub(".*-.*-", "feb", today)
gsub(".*-*-", "feb", today)
today
gsub("-.*-", "feb", today)
gsub("-.*-", "-feb-", today)
setwd("C:/Users/Tuomo/Dropbox/GitHub/Helsinki-Open-Data-Science/datasets")
hd <- read.csv("human_development.csv", stringsAsFactors = F)
gi <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Edu.Expected", "Edu.Mean", "GNI", "GNI.Minus.Rank")
names(gi) <- c("GII.Rank", "Country", "GII", "Maternal.Mortality",
"Adolescent.Birth", "Percent.Parliament.F", "Edu2.F", "Edu2.M",
"Labour.F", "Labour.M")
gi <- mutate(gi, Edu2.FM = Edu2.F / Edu2.M, Labour.FM = Labour.F / Labour.M)
library(dplyr)
gi <- mutate(gi, Edu2.FM = Edu2.F / Edu2.M, Labour.FM = Labour.F / Labour.M)
human1 <- inner_join(hd, gi, by = "Country")
write.table(file = "human1.txt", human1, sep =",", row.names = F)
human <- read.table("human1.txt", sep  =",", header = T)
human$GNI <- gsub(",","",human$GNI) %>% as.numeric
keep <- c("Country", "Edu2.FM", "Labour.FM", "Edu.Expected", "GNI", "Maternal.Mortality", "Percent.Parliament.F")
human <- dplyr::select(human, one_of(keep))
human <- filter(human, complete.cases(human))
rownames(human) <- human$Country
n_until <- nrow(human) - 7
human <- human[1:n_until, ]
human <- dplyr::select(human, -Country)
str(human)
hd <- read.csv("human_development.csv", stringsAsFactors = F)
gi <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Edu.Expected", "Edu.Mean", "GNI", "GNI.Minus.Rank")
names(gi) <- c("GII.Rank", "Country", "GII", "Maternal.Mortality",
"Adolescent.Birth", "Parliament.F", "Edu2.F", "Edu2.M",
"Labour.F", "Labour.M")
gi <- mutate(gi, Edu2.FM = Edu2.F / Edu2.M, Labour.FM = Labour.F / Labour.M)
human1 <- inner_join(hd, gi, by = "Country")
write.table(file = "human1.txt", human1, sep =",", row.names = F)
human <- read.table("human1.txt", sep  =",", header = T)
str(human)
human <- read.table("human1.txt", sep  =",", header = T)
human$GNI <- gsub(",","",human$GNI) %>% as.numeric
keep <- c("Country", "Edu2.FM", "Labour.FM", "Edu.Expected", "GNI", "Maternal.Mortality", "Parliament.F")
human <- dplyr::select(human, one_of(keep))
human <- filter(human, complete.cases(human))
rownames(human) <- human$Country
n_until <- nrow(human) - 7
human <- human[1:n_until, ]
human <- dplyr::select(human, -Country)
str(human)
write.table(file = "human2.txt", human, sep = ",", row.names = T)
test <- read.table("human2.txt", sep = ",", header = T)
test <- read.table("human2.txt", sep = ",", header = T)
str(test)
head(test)
hd <- read.csv("human_development.csv", stringsAsFactors = F)
gi <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Edu.Expected", "Edu.Mean", "GNI", "GNI.Minus.Rank")
names(gi) <- c("GII.Rank", "Country", "GII", "Matern.Mortal",
"Adolescent.Birth", "Parliament.F", "Edu2.F", "Edu2.M",
"Labour.F", "Labour.M")
gi <- mutate(gi, Edu2.FM = Edu2.F / Edu2.M, Labour.FM = Labour.F / Labour.M)
human1 <- inner_join(hd, gi, by = "Country")
write.table(file = "human1.txt", human1, sep =",", row.names = F)
human <- read.table("human1.txt", sep  =",", header = T)
human$GNI <- gsub(",","",human$GNI) %>% as.numeric
keep <- c("Country", "Edu2.FM", "Labour.FM", "Edu.Expected", "GNI", "Matern.Mortal", "Parliament.F")
human <- dplyr::select(human, one_of(keep))
human <- filter(human, complete.cases(human))
rownames(human) <- human$Country
n_until <- nrow(human) - 7
human <- human[1:n_until, ]
human <- dplyr::select(human, -Country)
write.table(file = "human2.txt", human, sep = ",", row.names = T)
test <- read.table("human2.txt", sep = ",", header = T)
str(test)
head(test)
hd <- read.csv("human_development.csv", stringsAsFactors = F)
gi <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Edu.Expect", "Edu.Mean", "GNI", "GNI.Minus.Rank")
names(gi) <- c("GII.Rank", "Country", "GII", "Matern.Mortal",
"Adolescent.Birth", "Parliament.F", "Edu2.F", "Edu2.M",
"Labour.F", "Labour.M")
gi <- mutate(gi, Edu2.FM = Edu2.F / Edu2.M, Labour.FM = Labour.F / Labour.M)
human1 <- inner_join(hd, gi, by = "Country")
str(human1)
hd <- read.csv("human_development.csv", stringsAsFactors = F)
gi <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expectancy", "Edu.Expect", "Edu.Mean", "GNI", "GNI.Minus.Rank")
names(gi) <- c("GII.Rank", "Country", "GII", "Matern.Mortal",
"Adolesc.Birth", "Parliament.F", "Edu2.F", "Edu2.M",
"Labour.F", "Labour.M")
gi <- mutate(gi, Edu2.FM = Edu2.F / Edu2.M, Labour.FM = Labour.F / Labour.M)
human1 <- inner_join(hd, gi, by = "Country")
write.table(file = "human1.txt", human1, sep =",", row.names = F)
human <- read.table("human1.txt", sep  =",", header = T)
human$GNI <- gsub(",","",human$GNI) %>% as.numeric
keep <- c("Country", "Edu2.FM", "Labour.FM", "Edu.Expect", "GNI", "Matern.Mortal", "Adolesc.Birth", "Parliament.F")
human <- dplyr::select(human, one_of(keep))
human <- filter(human, complete.cases(human))
rownames(human) <- human$Country
n_until <- nrow(human) - 7
human <- human[1:n_until, ]
human <- dplyr::select(human, -Country)
write.table(file = "human2.txt", human, sep = ",", row.names = T)
test <- read.table("human2.txt", sep = ",", header = T)
str(test)
head(test)
hd <- read.csv("human_development.csv", stringsAsFactors = F)
gi <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expect", "Edu.Expect", "Edu.Mean", "GNI", "GNI.Minus.Rank")
names(gi) <- c("GII.Rank", "Country", "GII", "Matern.Mortal",
"Adolesc.Birth", "Parliament.F", "Edu2.F", "Edu2.M",
"Labour.F", "Labour.M")
gi <- mutate(gi, Edu2.FM = Edu2.F / Edu2.M, Labour.FM = Labour.F / Labour.M)
human1 <- inner_join(hd, gi, by = "Country")
write.table(file = "human1.txt", human1, sep =",", row.names = F)
human <- read.table("human1.txt", sep  =",", header = T)
human$GNI <- gsub(",","",human$GNI) %>% as.numeric
keep <- c("Country", "Edu2.FM", "Labour.FM", "Edu.Expect", "Life.Expect", "GNI", "Matern.Mortal", "Adolesc.Birth", "Parliament.F")
human <- dplyr::select(human, one_of(keep))
human <- filter(human, complete.cases(human))
rownames(human) <- human$Country
n_until <- nrow(human) - 7
human <- human[1:n_until, ]
human <- dplyr::select(human, -Country)
write.table(file = "human2.txt", human, sep = ",", row.names = T)
test <- read.table("human2.txt", sep = ",", header = T)
str(test)
head(test)
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
human$GNI <- gsub(",","",human$GNI) %>% as.numeric
keep <- c("Country", "Edu2.FM", "Labour.FM", "Edu.Expect","Life.Expect", "GNI", "Matern.Mortal", "Adolesc.Birth","Parliament.F")
human <- select(human, one_of(keep))
# The Human Development Index (HDI) is a summary measure of achievements
# in key dimensions of human development
# data from kaggle: https://www.kaggle.com/undp/human-development
# Tuomo Nieminen 2017
# meta
# ----
# # kaggle
# browseURL("https://www.kaggle.com/undp/human-development")
#
# # HDI web page technical notes pdf
# browseURL("http://hdr.undp.org/sites/default/files/hdr2015_technical_notes.pdf")
# libraries
library(dplyr)
# data wrangling part 1
# ---------------------
# read human develop and gender inequality data
hd <- read.csv("human_development.csv", stringsAsFactors = F)
gi <- read.csv("gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# rename variables
names(hd) <- c("HDI.Rank", "Country", "HDI", "Life.Expect", "Edu.Expect", "Edu.Mean", "GNI", "GNI.Minus.Rank")
names(gi) <- c("GII.Rank", "Country", "GII", "Matern.Mortal",
"Adolesc.Birth", "Parliament.F", "Edu2.F", "Edu2.M",
"Labour.F", "Labour.M")
# do a bit of feature engineering
gi <- mutate(gi, Edu2.FM = Edu2.F / Edu2.M, Labour.FM = Labour.F / Labour.M)
# join data and write to file
human1 <- inner_join(hd, gi, by = "Country")
write.table(file = "human1.txt", human1, sep =",", row.names = F)
# data wrangling part 2
# --------------------
# access dplyr
library(dplyr)
# read data
human <- read.table("human1.txt", sep  =",", header = T)
# deal with comma  separator for thousand (GNI variable)
human$GNI <- gsub(",","",human$GNI) %>% as.numeric
# exclude unneeded variables
keep <- c("Country", "Edu2.FM", "Labour.FM", "Edu.Expect", "Life.Expect", "GNI", "Matern.Mortal", "Adolesc.Birth", "Parliament.F")
human <- dplyr::select(human, one_of(keep))
# remove rows with NA values
human <- filter(human, complete.cases(human))
# add countries as rownames
rownames(human) <- human$Country
# remove last 7  observations
n_until <- nrow(human) - 7
human <- human[1:n_until, ]
# remove the Country variable
human <- dplyr::select(human, -Country)
# save the data (with row.names = T !!)
write.table(file = "human2.txt", human, sep = ",", row.names = T)
# check that everything is in order
test <- read.table("human2.txt", sep = ",", header = T)
str(test)
head(test)
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt", sep  =",", header = T)
human$GNI <- gsub(",","",human$GNI) %>% as.numeric
keep <- c("Country", "Edu2.FM", "Labour.FM", "Edu.Expect","Life.Expect", "GNI", "Matern.Mortal", "Adolesc.Birth","Parliament.F")
human <- select(human, one_of(keep))
human <- filter(human, complete.cases(human))
rownames(human) <- human$Country
tail(human)
n_last <- nrow(human) - 7
world <- human[1:n_last, ]
human <- human[1:n_last, ]
human <- select(human, -Country)
st(human)
str(human)
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human2.txt", sep  =",", header = T)
str(human)
library(GGally)
ggpairs(human)
human_ <- scale(human)
pc <- prcomp(human_)
library(ggfortify)
autoplot(pc, data = human_, label = T, loadings =T, loadings.label  = T, label.size = 2.5, size = 0, loadings.label.size = 6)
pc$sdev
pc$sdev**2
pc$sdev**2 / sum(pc$sdev**2)
?`%>%`
rm(list = ls())
human <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human2.txt", sep  =",", header = T)
source("https://raw.githubusercontent.com/sinhrks/ggfortify/master/R/fortify_stats.R")
source("https://raw.githubusercontent.com/sinhrks/ggfortify/master/R/base_fortify_ts.R")
source("https://raw.githubusercontent.com/sinhrks/ggfortify/master/R/fortify_stats.R")
source("https://raw.githubusercontent.com/sinhrks/ggfortify/master/R/fortify_base.R")
source("https://raw.githubusercontent.com/sinhrks/ggfortify/master/R/base_fortify_ts.R")
source("https://raw.githubusercontent.com/sinhrks/ggfortify/master/R/fortify_stats.R")
